#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Mesh calculation
\begin_inset CommandInset label
LatexCommand label
name "chap:Triangulation"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
triangulation|(
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once an encoded image has been captured, this encoding must be translated
 from 
\begin_inset Formula $\left(u_{c},\, v_{c},\, u_{p}\right)$
\end_inset

 to 
\begin_inset Formula $\left(x,\, y,\, z\right)$
\end_inset

 coordinates.
 To do this, we use a simple ray-tracing algorithm, inversely to the way
 many 3D animation packages generate imagery from a computer file.
\end_layout

\begin_layout Subsection
Computing central angles of a pixel
\begin_inset CommandInset label
LatexCommand label
name "sub:Computing-central-angles"

\end_inset


\end_layout

\begin_layout Standard
Solving the system requires knowledge of 
\begin_inset Formula $\theta_{c}$
\end_inset

, the angle the incoming ray creates with the camera's optical axis.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Converting-camera-coordinates"

\end_inset

 demonstrates the geometry involved in this operation.
\end_layout

\begin_layout Standard
By itself, the camera can directly measure neither 
\begin_inset Formula $x_{c}$
\end_inset

 nor 
\begin_inset Formula $z_{c}$
\end_inset

.
 (If it could, this project would be rather pointless.) However, figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Converting-camera-coordinates"

\end_inset

 demonstrates that
\begin_inset Formula 
\begin{equation}
\frac{x_{c}}{z_{c}}=\frac{x_{c}^{\star}}{f_{c}},\label{eq:x/z}
\end{equation}

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename svg/focal-length.svg
	display false
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Converting-camera-coordinates"

\end_inset

Triangulation using focal length and retina resolution.
\end_layout

\end_inset


\end_layout

\end_inset

where 
\begin_inset Formula $f_{c}$
\end_inset

 is the distance between the focal point and the camera sensor.
 The sensor is composed of hundreds of pixel sensors, each approximately
 
\begin_inset Formula $2-8\,\unit{\mu m}$
\end_inset

 across.
 These sensors give the camera sensor a resolution 
\begin_inset Formula $R_{c}$
\end_inset

, measured in 
\begin_inset Formula $\unitfrac{mm}{px}$
\end_inset

 or 
\begin_inset Formula $\unitfrac{\mu m}{px}$
\end_inset

.
 These sensors convert the image into pixel coordinates with
\begin_inset Formula 
\begin{equation}
u_{c}^{\prime}=\frac{x_{c}^{\star}}{R_{c}}.\label{eq:u-prime}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
We can express the camera's scaling factor 
\begin_inset Formula $\alpha_{c}$
\end_inset

 in terms of pixels with
\begin_inset Formula 
\begin{equation}
\alpha_{c}\equiv\frac{f_{c}}{R_{c}}.\label{eq:f-bar}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
By combining Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:x/z"

\end_inset

 with Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:u-prime"

\end_inset

 and Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:f-bar"

\end_inset

, we get
\begin_inset Formula 
\begin{equation}
u_{c}^{\prime}=\alpha_{c}\frac{x_{c}}{z_{c}},\label{eq:u-prime-complete}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
which indicates that, given the normalized focal length, 
\begin_inset Formula $\theta_{c}$
\end_inset

 can be computed with
\begin_inset Formula 
\begin{eqnarray}
\tan\theta_{c} & = & \frac{x_{c}}{z_{c}}\mbox{, and}\\
\tan\theta_{c} & = & \frac{u_{c}^{\prime}}{\alpha_{c}}\label{eq:tan-theta-c}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Similarly,
\begin_inset Formula 
\begin{eqnarray}
\tan\phi_{c} & = & \frac{v_{c}^{\prime}}{\beta_{c}},\label{eq:tan-phi-c}\\
\tan\theta_{p} & = & \frac{u_{p}^{\prime}}{\alpha_{p}},\label{eq:tan-theta-p}\\
\tan\phi_{p} & = & \frac{v_{p}^{\prime}}{\beta_{p}},\label{eq:tan-phi-p}
\end{eqnarray}

\end_inset

and the values 
\begin_inset Formula $u^{\prime}$
\end_inset

 and 
\begin_inset Formula $v^{\prime}$
\end_inset

 may be computed with knowledge of the principal point 
\begin_inset Formula $\left(u_{0},v_{0}\right)$
\end_inset

 through the relationships
\begin_inset Formula 
\begin{eqnarray}
u^{\prime} & = & u-u_{0}\mbox{, and}\label{eq:u-prime-def}\\
v^{\prime} & = & v-v_{0}.\label{eq:v-prime-def}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Therefore, given any pixel 
\begin_inset Formula $\left(u,v\right)$
\end_inset

, we can compute a corresponding pair 
\begin_inset Formula $\left(\theta,\phi\right)$
\end_inset

 of angles formed with the optical axis in the 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 planes.
\end_layout

\begin_layout Standard
For simplicity, we assume 
\begin_inset Formula $\alpha_{c}=\beta_{c}$
\end_inset

 and 
\begin_inset Formula $\alpha_{p}=\beta_{p}$
\end_inset

.
 This is acceptable for most commercially available cameras and projectors,
 since they are typically manufactured with square pixels 
\begin_inset CommandInset citation
LatexCommand citep
key "faugeras1993three"

\end_inset

.
\end_layout

\begin_layout Subsection
Defining a ray through a given pixel
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pixel ray
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To simplify the explanation of reverse ray-tracing, we define a unit vector
 function 
\begin_inset Formula $\mathbf{\hat{X}}$
\end_inset

 such that, for a given optical device 
\begin_inset Formula $d$
\end_inset

 at position 
\begin_inset Formula $\mathbf{P}_{d}$
\end_inset

 and a given pixel 
\begin_inset Formula $\left(u_{d},v_{d}\right)$
\end_inset

 from the device, the ray 
\begin_inset Formula $\mathbf{R}\left(t\right)=\mathbf{P}_{d}+t\mathbf{\hat{X}}\left(u_{d},v_{d}\right)$
\end_inset

 describes all possible real-world points that may be imaged or illuminated
 by that pixel, depending on if the device is a camera or projector, respectivel
y.
 The definition of 
\begin_inset Formula $\mathbf{\hat{X}}\left(u,v\right)$
\end_inset

 is used for both the camera and the projector, as both may be modeled with
 the pinhole model.
 
\end_layout

\begin_layout Standard
We begin with the definition that 
\begin_inset Formula $\mathbf{\hat{X}}$
\end_inset

 is unit length, and can be defined in local coordinate space using 
\begin_inset Formula $\theta$
\end_inset

 and 
\begin_inset Formula $\phi,$
\end_inset

 as described in Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Computing-central-angles"

\end_inset

 with
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
1 & = & \hat{X}_{x}^{2}+\hat{X}_{y}^{2}+\hat{X}_{z}^{2},\label{eq:m-hat-unit}\\
\hat{X}_{z} & = & \left[\tan^{2}\theta+\tan^{2}\phi+1\right]^{-\frac{1}{2}}\mbox{, and}\\
\mathbf{\hat{X}} & = & \left(\begin{array}{c}
\hat{X}_{z}\tan\theta\\
\hat{X}_{z}\tan\phi\\
\hat{X}_{z}
\end{array}\right).\label{eq:m-hat}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $\tan\theta$
\end_inset

 and 
\begin_inset Formula $\tan\phi$
\end_inset

 are themselves functions of 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

, we can define 
\begin_inset Formula 
\begin{equation}
\mathbf{\hat{X}}\left(u,v\right)=\begin{pmatrix}\hat{X}_{z}\frac{u-u_{0}}{\alpha}\\
\hat{X}_{z}\frac{v-v_{0}}{\beta}\\
\hat{X}_{z}
\end{pmatrix},\label{eq:x-hat-mess}
\end{equation}

\end_inset

where
\begin_inset Formula 
\begin{equation}
\hat{X}_{z}=\left(\left[\frac{u-u_{0}}{\alpha}\right]+\left[\frac{v-v_{0}}{\beta}\right]^{2}+1\right)^{-\frac{1}{2}}.\label{eq:x-hat-z-full}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The definition of 
\begin_inset Formula $\mathbf{\hat{X}}$
\end_inset

 allows us to compute a ray through any pixel of the camera and, by extension,
 to form a parametric plane representing a column of pixels from the projector.
\end_layout

\begin_layout Subsection
Intersecting a camera pixel ray with a projection plane
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename svg/triangulation.svg
	display false
	width 50col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Triangulation-geometry."

\end_inset

Using ray-tracing to locate a point in 3D space.
\end_layout

\end_inset


\end_layout

\end_inset

All 3D work in this section is performed using the camera's coordinate system,
 as shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Triangulation-geometry."

\end_inset

.
 We start by assuming a distance vector 
\begin_inset Formula $\mathbf{D}$
\end_inset

 measured from the camera to the projector,
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "$\\mathbf{D}$"
description "distance vector between camera and projector"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\mathbf{D} & = & \left(\begin{array}{c}
D_{x}\\
D_{y}\\
D_{z}
\end{array}\right),\label{eq:def-D-vec}
\end{eqnarray}

\end_inset

and let 
\begin_inset Formula $\mathbf{\hat{M}}$
\end_inset

 be the unit vector pointing from the camera to the measured point 
\begin_inset Formula $\mathbf{M}$
\end_inset

.
 
\begin_inset Formula $\mathbf{M}$
\end_inset

 is measured in the camera's coordinate space.
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "$\\mathbf{M}$"
description "measured point"

\end_inset


\begin_inset Formula 
\begin{equation}
\mathbf{\hat{M}}=\mathbf{\hat{X}}\left(u_{c},v_{c}\right)\label{eq:def-M-hat}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
To relate the projector coordinates, we can use the fact that if the projector
 were to emit a single column of light, there exists a plane in space representi
ng all possible locations that that column could illuminate.
 Any point in this illuminated plane may be identified uniquely and parametrical
ly as a linear combination of two vectors 
\begin_inset Formula $\mathbf{F_{1}}$
\end_inset

 and 
\begin_inset Formula $\mathbf{F_{2}}$
\end_inset

, 
\begin_inset Formula 
\begin{equation}
\mathbf{F}\left(t_{1},t_{2}\right)=t_{1}\mathbf{F_{1}}+t_{2}\mathbf{F_{2}}.\label{eq:fringe-eqn}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Vertical columns, such as we use, will always pass through the projector's
 local 
\begin_inset Formula $y$
\end_inset

-axis, meaning that 
\begin_inset Formula 
\begin{eqnarray}
\mathbf{F_{1}} & = & \left(\begin{array}{c}
0\\
1\\
0
\end{array}\right).\label{eq:F1}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
To define 
\begin_inset Formula $\mathbf{F_{2}}$
\end_inset

, and therefore our plane, we can use the fact that the plane passes through
 
\begin_inset Formula $u_{p}$
\end_inset

.
 Since the plane passes through all possible values of 
\begin_inset Formula $v_{p}$
\end_inset

, we can select any constant value of 
\begin_inset Formula $v_{p}$
\end_inset

 to calculate the vector.
 We arbitrarily choose 0 for this value, and
\begin_inset Formula 
\begin{equation}
\mathbf{F_{2}}=\mathbf{\hat{X}}\left(u_{p},0\right).\label{eq:F2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Now we have three vectors which sum to 
\begin_inset Formula $\mathbf{D}$
\end_inset

 in a linear combination.
 We select constants 
\begin_inset Formula $k_{0}$
\end_inset

, 
\begin_inset Formula $k_{1}$
\end_inset

, and 
\begin_inset Formula $k_{2}$
\end_inset

 to solve.
 Combining this with the projector's arbitrary rotation 
\begin_inset Formula $\mathbf{R}_{p}$
\end_inset

 and the camera's arbitrary rotation 
\begin_inset Formula $\mathbf{R}_{c}$
\end_inset

 allows us to solve for triangulation of any arbitrary positioning of camera
 and projector
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Note that this does not mean that arbitrary positioning will necessarily
 yield acceptable results---factors such as device resolution, occlusion,
 and surface characteristics of the subject mean that the choice of positions
 is constrained.
 The significance of arbitrary positioning is that the mathematics is not
 a constraining factor in selecting a configuration.
\end_layout

\end_inset

.
 
\begin_inset Formula $\mathbf{R}_{p}$
\end_inset

 and 
\begin_inset Formula $\mathbf{R}_{c}$
\end_inset

 are rotation matrices as used in geometric transformations.
\end_layout

\begin_layout Standard
We express this linear combination with
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
k_{0}\mathbf{R}_{c}\mathbf{\hat{M}}+k_{1}\mathbf{R}_{p}\mathbf{F_{1}}+k_{2}\mathbf{R}_{p}\mathbf{F_{2}}=\mathbf{D},\label{eq:solve-me}
\end{equation}

\end_inset

which we solve by computing
\begin_inset Formula 
\begin{eqnarray}
\left(\begin{array}{ccc}
\mathbf{R_{c}\hat{M}} & \mathbf{R_{p}F_{1}} & \mathbf{R_{p}F_{2}}\end{array}\right)\left(\begin{array}{c}
k_{0}\\
k_{1}\\
k_{2}
\end{array}\right) & = & \left(\begin{array}{c}
\mathbf{D}\end{array}\right)\mbox{, and}\label{eq:solving-1}\\
\left(\begin{array}{ccc}
\mathbf{R_{c}\hat{M}} & \mathbf{R_{p}F_{1}} & \mathbf{R_{p}F_{2}}\end{array}\right)^{-1}\left(\begin{array}{c}
\mathbf{D}\end{array}\right) & = & \left(\begin{array}{c}
k_{0}\\
k_{1}\\
k_{2}
\end{array}\right).\label{eq:solving-2}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Now that we have our constants, the point 
\begin_inset Formula $\mathbf{M}$
\end_inset

 may be expressed as
\begin_inset Formula 
\begin{equation}
\mathbf{M}=k_{0}\mathbf{R_{c}\hat{M}},\label{eq:M-equals-k0-M-hat-c}
\end{equation}

\end_inset

with the system origin defined as the origin of the camera's pinhole model.
 Aligning the global coordinate system with the camera means
\begin_inset Formula 
\begin{equation}
\mathbf{R}_{c}=\begin{pmatrix}1 & 0 & 0\\
0 & 1 & 0\\
0 & 0 & 1
\end{pmatrix},\label{eq:def-Rc-identity}
\end{equation}

\end_inset

and Equation 
\begin_inset CommandInset ref
LatexCommand vref
reference "eq:M-equals-k0-M-hat-c"

\end_inset

 simplifies to
\begin_inset Formula 
\begin{equation}
\mathbf{M}=k_{0}\mathbf{\hat{M}}.\label{eq:measured-point-final}
\end{equation}

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
triangulation|)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Converting to surfels
\end_layout

\begin_layout Standard
Applying the above techniques to an input image results in a two-dimensional
 matrix where each element is a three-dimensional point.
 This group of points may be immediately exported as a point cloud for quick
 verification and visualization of results.
 However, to be most useful in a CAD package, these points must be merged
 into a mesh.
 This merging is best done in the scanning software, as the input image
 implicitly describes relationships between adjacent points.
\end_layout

\begin_layout Standard
Our proposed meshing method uses surfels
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
surfels
\end_layout

\end_inset

 to represent the surface.
 A surfel, short for 
\emph on
surf
\emph default
ace 
\emph on
el
\emph default
ement, represents a small patch of the object's surface in much the same
 way that a pixel represents a small patch of a computer screen.
 A surfel stores location, normal, color, and size 
\series bold

\begin_inset CommandInset citation
LatexCommand citep
key "weise2009hand"

\end_inset


\series default
.
 Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:A-surfel,-with"

\end_inset

 shows a simple visual representation of a surfel.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename svg/surfel.svg
	lyxscale 33
	width 15col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-surfel,-with"

\end_inset

A surfel, with location 
\begin_inset Formula $\mathbf{p}$
\end_inset

, normal 
\begin_inset Formula $\mathbf{\hat{n}}$
\end_inset

, color 
\begin_inset Formula $\mathbf{q}$
\end_inset

, and radius 
\begin_inset Formula $r$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
There exist many methods and software packages capable of translating surfels
 into a fully healed mesh.
 Appendix 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Open-source-libraries-and"

\end_inset

 lists some freely available software libraries and packages that speed
 this process.
\end_layout

\end_body
\end_document
